<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">
	<configuration>
	
	<!-- 别名定义 -->
	<!-- <typeAliases>
		针对单个别名定义 
		type：类型的路径
		alias：别名
		 <typeAlias type="cn.itcast.mybatis.po.City" alias="City"/>
	</typeAliases> -->
	
	<properties resource="db.properties"></properties>
	<typeAliases>
		<!-- 定义在properties之后 -->
		<!-- <typeAlias type="cn.itcast.mybatis.po.City" alias="City"/>-->
		<!-- 批量别名定义（常用）
		指定包名：mybatis自动扫描包中的po类，自动定义别名，
		别名就是类名（首字母大写或小写都可以） -->
		<package name="cn.itcast.mybatis.po"/>
	</typeAliases>
	<!-- typeHandlers（类型处理器）
		mybatis通过typeHandlers完成jdbc类型和java类型的转换 
		通常情况下，mybatis提供的类型处理器满足日常需要，不需要自定义-->
	<environments default="development">
		<environment id="development">
			<transactionManager type="JDBC"/>
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}"/>
				<property name="url" value="${jdbc.url}"/>
				<property name="username" value="${jdbc.username}"/>
				<property name="password" value="${jdbc.password}"/>
			</dataSource>
		</environment>
	</environments>
	<!-- Mapper映射配置
	通过resource加载单个映射文件 -->
	<mappers>
	<!-- 通过resource一次加载一个映射文件 -->
		<mapper resource="sqlmap/City.xml"/>
		<!-- <mapper resource="mapper/CityMapper.xml"/> -->
	<!-- 通过mapper接口加载映射文件
	遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，
	且在一个目录中 
	上面规范的前提是，使用的是mapper代理方法-->
	<!-- <mapper class="cn.itcast.mybatis.mapper.CityMapper"/>-->
	<!-- 批量加载多个mapper（推荐使用） -->
	<!-- 通过mapper接口加载映射文件
	遵循一些规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，
	且在一个目录中 
	上面规范的前提是，使用的是mapper代理方法-->
	<mapper class="cn.itcast.mybatis.mapper.CityMapper"/>
	</mappers>
</configuration>
<!-- 加载属性文件 -->
	<!--
		MyBatis按照下面的顺序来加载属性：
		在properties元素体内的属性首先被读取
		然后会读取properties元素中resource或url加载的属性，它会覆盖已读取的同名属性
		最后读取parameterType传递的属性，它会覆盖已读取的同名属性 
	 -->
	<!-- 
	setting:全局参数配置
	全局参数将会影响mybatis的运行行为 -->
	<!--
	typeAliases（别名），可以针对parameterType和resultType指定的类型定义一些别名 
	 -->